Como escrever um código que solicita que o computador amplifique a imagem circulo.bmp?

Para isso, usaremos três instruções que fazem parte do conjunto de funções da linguagem de programação JavaScript:

Passo	Instrução				Significado em português
1	img = newSimpleImage("circulo.bmp");	Carrega a imagem circulo.bmp na memória e a armazena na variável que, neste exemplo, chamamos de img.
2	img.setZoom(20);			Estabelece ampliação de 20 vezes o tamanho original para a imagem armazenada na variável img.
3	print(img);				Apresenta a imagem na tela.

Manipulando cada bit

Agora vamos partir para um segundo cenário um pouco mais interessante.

Queremos estender o código usado na Prática 1 para sermos capazes de manipular individualmente cada pixel.

Para isso, tudo que precisamos fazer é ajustar os passos da tabela 1 e adicionar duas novas instruções logo antes da instrução print, veja a seguir. Essas instruções também fazem parte das
funções padronizadas pela linguagem JavaScript.

Passo	Instrução				Significado em português
1	img = new SimpleImage("circulo.bmp");	Carrega a imagem circulo.bmp na memória e a armazena na variável chamada img.
2	img.setZoom(20);			20 vezes o tamanho original para a imagem armazenada na variável img. Um zoom menor do que 0 (zero) equivale a um afastamento. Por exemplo, 
						um zoom de 0.5 equivale a um afastamento de 2x.
3	pixel = img.getPixel(4,4)		Obtém a referência ao pixel (4,4) da imagem armazenada na variável img e atribui essa referência à variável pixel.
4	pixel.setRed(255)			Instrui o computador a ajustar para 255 o nível de vermelho para o pixel em questão.
5	print(image);				Apresenta a imagem na tela.

Em seguida, no Passo 4, a instrução pixel.setRed (255) ordena que o computador ajuste a saturação de vermelho do pixel para o nível 255, que é o maior valor possível.

Assim como a função setRed() ajusta o nível de vermelho para o pixel, temos duas outras funções análogas para manipular os níveis de azul e de verde de um pixel. A tabela 3 apresenta as 
três funções possíveis para essa manipulação, veja:


Passo	Instrução		Significado em português
1	pixel.setRed(número)	Ajusta o nível de vermelho do pixel conforme o número informado. O número deve ser entre 0 e 255.
2	pixel.setGreen(número)	Ajusta o nível de verde do pixel conforme o número informado. O número deve ser entre 0 e 255.
3	pixel.setBlue(número)	Ajusta o nível de azul do pixel conforme o número informado. O número deve ser entre 0 e 255.

Suponha que, em vez de manipular apenas um pixel por vez, conforme fizemos neste módulo, desejássemos manipular todos os pixels de uma imagem, digamos de 10x10 pixels (exemplo: circulo.bmp).
Se usássemos o código que aprendemos a escrever, teríamos de escrever 100 vezes a instrução pixel = img.getPixel(), em que, a cada vez, passaríamos os valores x,y para cada um dos pixels 
da imagem.

Isso traz vários problemas.

O primeiro deles é que o código ficaria difícil de ler/compreender.
O segundo é que, se for uma imagem maior, de 1980x1024 pixels, teríamos cerca de 2 milhões de pixels.
Portanto, a instrução pixel = img.getPixel() teria de ser escrita cerca de 2 milhões de vezes no código fonte, a cada vez fazendo referência para um pixel diferente.



