Basicamente, em vez de um número fixo conhecido antecipadamente, podemos usar um pouco de expressão aritmética. Assim, temos uma forma mais rica de fornecer parâmetros para funções.


Isso funciona da seguinte maneira: quando o computador executar a linha de código que contém a expressão, o primeiro passo será avaliá-la. Assim, ele lerá e resolverá a expressão para 
chegar ao valor resultante. Neste exemplo, 40+11 é apenas uma soma. O computador calcula que 40+11 é igual a 51. Uma vez que a expressão foi avaliada e o resultado foi 51, então, o 
computador continua a execução do código, usando o resultado da expressão como parâmetro para a função. Com efeito, em nosso exemplo o computador simplesmente imprimirá o valor 51 na tela.

De fato, podemos usar expressões em qualquer local do código de computador onde valores numéricos são admitidos. Portanto, é possível sempre embutir expressões aritméticas para que seja 
computado o valor que desejamos usar de fato. Isso nos possibilita resolver problemas mais realistas.

Antes de continuar, vamos conhecer três funções de manipulações de pixels que fazem parte da linguagem de programação JavaScript:

Passo	Instrução		Significado em português
1	pixel.getRed()		Obtém/Lê o valor atual para o componente RGB vermelho do pixel.
2	pixel.getGreen()	Obtém/Lê o valor atual para o componente RGB verde do pixel.
3	pixel.getBlue()		Obtém/Lê o valor atual para o componente RGB azul do pixel.

Suponha um pixel em amarelo (exemplo: Código RGB 255,255,0). Neste caso, a função pixel.getRed() retornará o valor 255, pois este é o valor atual do componente vermelho (R) do pixel.

De forma análoga, a função pixel.getBlue() retornaria 0 (zero), pois este é o valor atual do componente azul (B) do pixel em questão. Isso ocorre porque o amarelo puro não possui azul em 
sua composição.

Agora, vamos supor que desejamos duplicar o valor atual do componente vermelho de um pixel. Se esse valor for 50, ajustaremos para 100. Se for 105, ajustaremos para 210. Em resumo, 
desejamos realizar um ajuste relativo no valor. Então, seja qual for o valor atual, nós o duplicaremos.

Já conhecemos a função pixel.getRed() e a possiblidade do uso de expressões. Logo, a tarefa ficou mais fácil. Uma primeira solução seria usar este código:

ultimo = pixel.getRed();
pixel.setRed(ultimo*2);

1ª linha
Chama pixel.getRed() e armazena o valor retornado na variável ultimo.

2ª linha
Usa a função pixel.setRed() para informar que o novo valor deste pixel será o dobro do último valor..


Logo, quando começar a executar a segunda linha:

O primeiro passo do computador será avaliar qual é o resultado da expressão ultimo*2. Se imaginarmos que o último valor para o pixel é 60, a expressão multiplicará esse valor por 2, o que 
resultará em 120.

Em seguida, o computador executará a função pixel.setRed() com o valor 120 como parâmetro, o que dobrará a intensidade de vermelho do pixel em questão.

Com efeito, o resultado das duas linhas de código é, de fato, duplicar a intensidade de vermelho do pixel atual.

Na prática, desejamos mostrar que a solução em questão pode ser condensada em apenas uma linha de código.

Note que a variável ultimo não tinha um objetivo muito importante no código. Ela apenas armazenava temporariamente o último valor do componente vermelho do pixel para que este fosse usado 
na instrução seguinte.

Vamos supor que o pixel em questão esteja com os valores RGB (50,20,30). Então, o componente vermelho possui o valor 50. O computador fará o seguinte:

1*
Executar a instrução pixel.getRed() para obter o valor atual do pixel, que é 50.

2*
Avaliar a expressão pixel.getRed()*2 e resolvê-la, multiplicando o valor atual do pixel por 2 e obtendo o resultado 100.

3*
Executar a instrução pixel.setRed() usando como parâmetro o resultado da operação aritmética do Passo 2, ou seja, o valor dobrado para o componente vermelho do pixel, que é 100.

Com isso, o novo valor RGB para o pixel em questão será: RGB (100,20,30). Se fizermos o mesmo para todos os pixels de uma imagem, o usuário perceberá essa alteração como uma imagem com os 
tons de vermelho mais destacados.

Se, no mesmo exemplo, desejássemos reduzir pela metade a intensidade de vermelho do pixel, a linha de código ficaria assim:

pixel.setRed( pixel.getRed()/2 );

Note que, em vez de usarmos o asterisco, que denota multiplicação, utilizamos o “/”, que denota divisão.

Outra forma de escrever a mesma solução seria multiplicar o pixel atual por 0.5, o que é o mesmo que dividir por 2. Então, nesse caso, teríamos:

pixel.setRed( pixel.getRed()*0.5 );

Para alcançar o objetivo de converter a imagem de flores amarelas em uma imagem em escala de cinza, vamos calcular, para cada pixel, o valor médio dos componentes RGB. Depois, ajustaremos 
cada um dos três componentes para esse valor médio. Veja o trecho de código que calcula a média dos três componentes (R, G e B) para um dado pixel, depois, atribui esse valor médio aos 
três componentes de cor do pixel:

img = new SimpleImage("img/flores.jpg");
for( pixel: img ){
// Insira suas linhas de código abaixo
soma=(pixel.getGreen()+pixel.getGreen()+pixel.getGreen());
media= soma/3;
pixel.setRed( media );
pixel.setGreen( media );
pixel.setBlue( media );
}
print( img );


