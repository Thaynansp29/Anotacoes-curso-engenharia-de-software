						qComputadores multicore
Um processador é considerado multicore quando combina duas ou mais unidades de processamento (chamados de core) em uma única pastilha de silício. De modo geral, cada um dos cores
 possui os componentes de um processador de forma independente, tais como registradores, ULA, hardware de pipeline e UC, além das caches L1 de dados e instruções e caches L2 e L3.

Desempenho do hardware
O projeto de evolução dos processadores se baseou, inicialmente, no aumento de paralelismo em nível das instruções, buscando realizar mais trabalho em cada ciclo do clock, o que resultou 
em soluções como o pipeline, estrutura superescalar e SMT (multithreading simultâneo). Em cada uma delas, os projetistas tentaram aumentar o desempenho do sistema incrementando a 
complexidade das soluções.

Entretanto, muitas dessas soluções se depararam com algumas limitações (nos processos de fabricação, nos materiais utilizados) e exigência de melhores controles para que fosse possível 
garantir a sua eficiência.

Com a construção de novos processadores, houve o acréscimo do número de transistores por chip e altas frequências de clock. Nesse contexto, o aumento do consumo de energia cresceu
exponencialmente e, por conseguinte, a produção de calor, entre outras inúmeras situações.

Seguindo essa linha de raciocínio, podemos referenciar a Regra de Pollack. Ela determina que o aumento de desempenho é diretamente proporcional à raiz quadrada do aumento da complexidade. 
Nesse caso, se a lógica utilizada em um core do processador for dobrada, apenas conseguirá um aumento de 40% no seu desempenho. Logo, com o uso de vários cores, cria-se potencial para 
aumentar o desempenho de forma quase linear, caso o software possa usar essa vantagem.

Outro ponto importante deve-se à capacidade de integração das pastilhas, o que permite aumentar proporcionalmente o espaço destinado ao uso das caches, reduzindo, assim, o consumo de 
energia.

	Aplicações multithread nativas (parelelismo em nível de thread)
São caracterizadas por possuírem um pequeno número de processos com alto nível de paralelização.

	Aplicações com múltiplos processos (paralelismo em nível de processo)
São caracterizadas pela presença de muitos processos de thread única (threads podem ser consideradas como fluxos de um processo).

	Aplicações Java
Aceitam threads de uma maneira natural, isto é, a Máquina Virtual Java (JVM) é um processo multithread que permite o escalonamento e o gerenciamento de memória para aplicações Java.

	Aplicações com múltiplas instâncias (paralelismo em nível de aplicação)
Mesmo que uma aplicação individual não possa ser dimensionada para obter vantagem em um número grande de threads, ainda é possível que se beneficie com a execução de várias instâncias 
da aplicação em paralelo.



Organização multicore
As principais variáveis em uma organização multicore são:

Número de cores processadores no chip

Número de níveis da memória cache

Quantidade de memória cache compartilhada

Emprego do multithreading simultâneo (SMT)

						Níveis de cache e cache compartilhada
*Cache L1 dedicada
Há dois ou mais processadores semelhantes (capacidades que podem ser comparadas).

*Cache L2 dedicada
As caches L1 não são compartilhadas, mas, neste caso, há espaço suficiente no chip para permitir a cache L2. Exemplo: AMD Opteron e Athlon X2.

*Cache L2 compartilhada
É representada uma organização semelhante ao item anterior, mas agora o uso de cache L2 é compartilhada. Exemplo: Intel Core Duo – esse foi um marco definido pela Intel para a construção 
de processadores multicore com maior eficiência.
O uso de caches L2 compartilhadas no chip possui inúmeras vantagens quando comparado à dependência exclusiva das caches dedicadas, como, por exemplo, a comunicação mais eficiente entre os 
processadores e a implementação de caches coerentes.

*Cache L3 compartilhada
Representa a possibilidade de expansão na quantidade de área disponível para caches no chip. Aqui, temos a divisão de uma cache L3 separada e compartilhada, com caches L1 e L2 dedicadas 
para cada core do processador. Exemplo: o Intel Core I7.


Intel Core Duo
Utiliza cores superescalares puros.
	X
Intel Core I7
Utiliza cores SMT.

				Cores SMT
O SMT permite ampliar o uso de threads em nível de hardware que o sistema multicore suporta. Um sistema multicore com quatro cores e SMT, que suporta quatro threads simultâneos em cada 
core, assemelha-se a um sistema multicore de 16 cores. Exemplo: Blue Gene/Q da IBM possui SMT de 4 vias.

(a) Superescalar
No primeiro exemplo, com um único processador superescalar – o processador está em uso, mas cerca de metade do tempo do processador permanece sem uso.

(b) Multiprocessing
No multiprocessamento, é possível verificar um sistema de CPU dupla trabalhando em dois threads separados. No entanto, novamente cerca de 50% do tempo de ambas as CPUs permanecem sem uso.

(c) Hyper-threading
No terceiro caso, um único processador está habilitado para hyper-threading, os dois threads estão sendo computados simultaneamente e a eficiência da CPU aumentou de cerca de 50% para 
mais de 90%.

(d) Multiprocessing with hyper-threading
No último exemplo, há dois processadores habilitados para hyper-threading que podem funcionar em quatro threads independentes ao mesmo tempo. Novamente, a eficiência da CPU é de cerca de 
90%. Nesse caso, teríamos quatro processadores lógicos e dois processadores físicos.


 Processador possui a capacidade de executar mais de uma thread no mesmo instante. : Multithreading simultâneo SMT

 Técnica que permite explorar TLP (paralelismo a nível de threads) e ILP (paralelismo a nível de instrução). : Multithreading
 
 Múltiplos núcleos de execução em um processador. : Multicore
 
 Arquitetura que permite a mais de um processador compartilhar recursos de memória, discos e rodar no mesmo SO. : Simultaneous Multiprocessing (SMP)


