CONCEITOS DE POO - PROGRAMAÇÃO ORIENTADA A OBJETOS

Muitas vezes, analisamos um problema do mudo real pensando no projeto, que, por sua vez, é influenciado por ideias sobre codificação, que são fortemente influenciadas pelas linguagens de 
programação disponíveis. A abordagem baseada em objetos permite que os mesmos conceitos e a mesma notação sejam usados durante todo o processo de desenvolvimento de software, ou seja, não 
existem conceitos de análise de projetos diferentes dos conceitos de implementação dos projetos. A abordagem procura refletir os problemas do mundo real através de interação de objetos 
modelados computacionalmente. Portanto, o desenvolvedor do software não necessita realizar traduções para outra notação em cada etapa do desenvolvimento de um projeto de software.

PILARES DA ORIENTAÇÃO A OBJETOS
OBJETOS

Um objeto é a representação computacional de um elemento ou processo do mundo real. Cada objeto possui suas características (informações) e uma série de operações (comportamento) que 
alteram as suas características (estado do objeto). Todo o processamento das linguagens de programação orientadas a objetos se baseia no armazenamento e na manipulação das informações 
(estados). São exemplos de objetos do mundo real e computacional: Aluno, Professor, Livro, Empréstimo e Locação. (Costa, 2015).

É importante, durante a etapa de levantamento dos objetos, analisar apenas os objetos relevantes (abstrair) com as respectivas características mais importantes para o problema a ser 
resolvido. Por exemplo, as características de uma pessoa para um sistema acadêmico podem ser formação, nome do pai e da mãe, enquanto as características de um indivíduo para o sistema de 
controle de uma academia são altura e peso.

Atributos
São propriedades do mundo real que descrevem um objeto. Cada objeto possui suas respectivas propriedades do mundo real, os quais possuem valores. A orientação a objetos define as 
propriedades como atributos. O conjunto de valores dos atributos de um objeto definem o seu estado naquele momento.

Operações
Uma operação é uma função ou transformação que pode ser aplicada a objetos ou dados pertencentes a um objeto. Importante dizer que todo objeto possui um conjunto de operações, que podem 
ser chamadas por outros objetos de modo a colaborarem entre si. Esse conjunto de operações é conhecido como interface. A única forma de colaboração entre os objetos é por meio das suas 
respectivas interfaces.

Utilizando o exemplo acima, podemos alterar nome, idade e peso da pessoa por meio de um conjunto de operações. Portanto, normalmente, essas operações alteram o estado do objeto. Vamos ver a
seguir outros exemplos de operações:

Exemplo:

Classe empresa = Contratar_Funcionario, Despedir_Fucionario;

Classe janela = Abrir, fechar, ocultar.

Basicamente, deve-se analisar o mundo real e identificar quais objetos devem fazer parte da solução do problema. Para cada objeto identificado, levantam-se os atributos que descrevem as 
propriedades dos objetos e as operações que podem ser executadas sobre esses objetos.

CLASSES
A classe descreve as características e os comportamento de um conjunto de objetos. De acordo com a estratégia de classificação, cada objeto pertence a uma única classe e possuirá os 
atributos e as operações definidos na classe. Durante a execução de um programa orientado a objetos, são instanciados os objetos a partir da classe, portanto, um objeto é chamado de 
instância de sua classe.

A classe é o bloco básico para a construção de programas OO – Orientados a Objetos.

Importante ressaltar que cada nome de atributo é único dentro de uma classe, no entanto, essa premissa não é verdadeira quando se consideram todas as classes. Por exemplo, as classes 
Pessoa e Empresa podem ter um atributo comum chamado de Endereço.

Com base na Tabela 1, vista anteriormente, deve ser definida uma classe Pessoa com os atributos Nome, Idade, Peso e Altura. A partir da classe Pessoa, pode-se instanciar uma quantidade 
ilimitada de objetos contendo os mesmos atributos. Os objetos de uma classe sempre compartilham o conjunto de operações que atuam sobre seus dados, alterando o estado do objeto.

Um programa orientado a objetos consiste basicamente em um conjunto de objetos que colaboram entre si, por meio de uma troca de mensagens, para a solução de um problema computacional. 
Cada troca de mensagens significa a chamada de uma operação feita pelo objeto receptor da mensagem.

ENCAPSULAMENTO
O conceito de encapsulamento consiste na separação dos aspectos externos (operações) de um objeto acessíveis a outros objetos, além de seus detalhes internos de implementação, que ficam 
ocultos dos demais objetos (RUMBAUGH, 1994). Algumas vezes, é conhecido como o princípio do ocultamento de informação, pois permite que uma classe encapsule atributos e comportamentos, 
ocultando os detalhes da implementação. Partindo desse princípio, a interface de comunicação de um objeto deve ser definida de modo a revelar o menos possível sobre o seu funcionamento 
interno.

Exemplo:
Foi desenvolvido um objeto ApresentaçãoMapa, pertencente a um aplicativo de entrega móvel, que possui a responsabilidade de apresentar um mapa com o menor caminho entre dois pontos. Porém,
o objeto não “sabe” como calcular a distância entre os dois pontos.

Para resolver esse problema, ele precisa colaborar com um objeto Mapa que “sabe” calcular e, portanto, possui essa responsabilidade. O objeto Mapa implementa essa responsabilidade por 
meio da operação Calcula Melhor Caminho, cujo resultado é a menor rota entre duas coordenadas geográficas.

Utilizando o encapsulamento, o objeto Mapa calcula e retorna o melhor caminho para o objeto ApresentaçãoMapa de maneira transparente, escondendo a complexidade da execução dessa tarefa.

Uma característica importante do encapsulamento é que pode surgir um modo diferente de se calcular o melhor caminho entre dois pontos. Por conta disso, o objeto Mapa deverá mudar o seu 
comportamento interno para implementar esse novo cálculo. Porém, essa mudança não afetará o objeto ApresentaçãoMapa, pois a implementação foi realizada isoladamente (encapsulamento) no 
objeto Mapa, sem impacto para outros objetos no sistema.

Resumindo
Os objetos clientes têm conhecimento apenas das operações que podem ser requisitadas e precisam estar cientes apenas do que as operações realizam, e não de como elas estão implementadas.

HERANÇA
Na orientação a objetos, a herança é um mecanismo por meio do qual classes compartilham atributos e comportamentos, formando uma hierarquia. Uma classe herdeira recebe as características 
de outra classe para reimplementá-las ou especializar de uma maneira diferente da classe pai. A herança permite capturar similaridades entre classes, dispondo-as em hierarquias. As 
similaridades incluem atributos e operações sobre as classes.

No esquema anterior, as classes Carro, Moto, Caminhão e Ônibus herdam características em comum da classe Veículo, como os atributos chassis, ano, cor e modelo.

Uma classe pode ser definida genericamente como uma superclasse e, depois, especializada em classes mais específicas (subclasses). A herança permite a reutilização de código em larga escala,
pois possibilita que se herde todo o código já implementado na classe pai e se adicione apenas o código específico para as funcionalidades novas implementadas pela classe filha.

A evolução dos sistemas orientados a objetos também é facilitada, pois, caso surja uma classe nova com atributos e/ou operações comuns a outra, basta inseri-la na hierarquia, acelerando a 
implementação.

HERANÇA SIMPLES
A herança é considerada simples quando uma classe herda as características existentes apenas de uma superclasse.

Na figura a seguir, temos uma superclasse Pessoa que possui os atributos CPF, RG, Nome e Endereço. Em seguida, a classe Professor precisa herdar os atributos da superclasse Pessoa, além de
adicionar atributos específicos do contexto da classe Professor, como titularidade e salário.

HERANÇA MÚLTIPLA
A herança é considerada múltipla quando uma classe herda características de duas ou mais superclasses. Por exemplo, no caso do sistema acadêmico, o docente também pode desejar realizar um 
outro curso de graduação na mesma instituição em que trabalha. Portanto, ele possuirá os atributos da classe Professor e os da classe Aluno. Além disso, haverá também um atributo 
DescontoProfessor, o qual apenas quando houver a associação professor e aluno com a universidade.

Para adaptar essa situação no mundo real, deve ser criada uma modelagem de classes. Uma nova subclasse ProfessorAluno precisa ser adicionada, herdando atributos e operações das classes 
Professor e Aluno. Isso configura uma herança múltipla. Essa nova subclasse deverá ter o atributo DescontoProfessor, que faz sentido apenas para essa classe.

POLIMORFISMO
O Polimorfismo é a capacidade de um mesmo comportamento diferente em classes diferentes. Uma mesma mensagem será executada de maneira diversa, dependendo do objeto receptor. O polimorfismo
acontece quando reimplementamos um método nas subclasses de uma herança.

