Python oferece, em seu núcleo, algumas funções que já utilizamos, como print() e input(), além de classes como int, float e str. Logicamente, o núcleo da linguagem Python disponibiliza 
muitas outras funções (ou métodos) e classes além das citadas. Mas, ainda assim, ele é pequeno, com objetivo de simplificar o uso e ganhar eficiência. Para aumentar a disponibilidade de 
funções, métodos e classes, o desenvolvedor pode usar a biblioteca padrão Python.

BIBLIOTECA PADRÃO PYTHON

Operações matemáticas.

Interface gráfica com o usuário (GUI).

Funções matemáticas e geração de números pseudoaleatórios.

COMO USAR UMA FUNÇÃO DE MÓDULO IMPORTADO

Para usar as funções e os métodos de um módulo, são necessários dois passos:

Fazer a importação do módulo desejado com a instrução:

import nome_modulo

Chamar a função desejada, precedida do nome do módulo, com a instrução:

nome_modulo.nome_funcao(paramêtros)

Como exemplo, vamos importar o módulo math (dedicado a operações matemáticas) e calcular a raiz quadrada de 5, por meio da função sqrt(). 

>>> import math
>>> math.sqrt(5)
2.23606797749979

A partir desse ponto, serão apresentados os principais aspectos dos seguintes módulos:

math
usado para operações matemáticas.

random
usado para gerar números pseudoaleatórios.

smtplib
usado para permitir envio de e-mails.

time
usado para implementar contadores temporais.

tkinter
usado para desenvolver interfaces gráficas.

MÓDULO MATH
Esse módulo provê acesso a funções matemáticas de argumentos reais. As funções não podem ser usadas com números complexos.


Função	Retorno

sqrt(x)	Raiz quadrada de x

ceil(x)	Menor inteiro maior ou igual a x

floor(x)	Maior inteiro menor ou igual a x

cos(x)	Cosseno de x

sin(x)	Seno de x

log(x, b)	Logaritmo de x na base b

pi	Valor de Pi (3.141592...)

e	Valor de e (2.718281...)

MÓDULO RANDOM
Esse módulo implementa geradores de números pseudoaleatórios para várias distribuições.

Escolha uma das Etapas a seguir.
Números inteiros
Para inteiros, existe:

*Uma seleção uniforme a partir de um intervalo.

Sequências
Para sequências, existem:

*Uma seleção uniforme de um elemento aleatório;
*Uma função para gerar uma permutação aleatória das posições na lista;
*Uma função para escolher aleatoriamente sem substituição.

Distribuições de valores reais

Função		Retorno

random()	Número de ponto flutuante no intervalo [0.0, 1.0)

uniform(a, b)	Número de ponto flutuante N tal que a ≤ N ≤ b

gauss(mu, sigma)	Distribuição gaussiana. mu é a média e sigma é o desvio padrão.

normalvariate(mu, sigma)	Distribuição normal. mu é a média e sigma é o desvio padrão.


Funções para números inteiros
A Tabela 9 mostra algumas das principais funções disponíveis para inteiros no módulo random.

Função						Retorno

randrange(stop)					Um elemento selecionado aleatório de range(start, stop, step), mas sem construir um objeto range.
randrange(start, stop [,step])			Um elemento selecionado aleatório de range(start, stop, step), mas sem construir um objeto range.
randint(a, b)					Número inteiro N tal que a ≤ N ≤ b

Funções para sequências

Função				Retorno
choice(seq)			Elemento aleatório de uma sequência não vazia seq.
shuffle(x[, random])		Embaralha a sequência x no lugar.
sample(pop, k)			Uma sequência de tamanho k de elementos escolhidos da população pop, sem repetição. Usada para amostragem sem substituição.

MÓDULO TIME
Esse módulo provê diversas funções relacionadas a tempo. Também pode ser útil conhecer os módulos datetime e calendar.

Função				Retorno
time()				Número de segundos passados desde o início da contagem (epoch). Por padrão, o início é 00:00:00 do dia 1 de janeiro de 1970.
ctime(segundos)			Uma string representando o horário local, calculado a partir do número de segundos passado como parâmetro.
gmtime(segundos)		Converte o número de segundos em um objeto struct_time descrito a seguir.
localtime(segundos)		Semelhante à gmtime(), mas converte para o horário local.
sleep(segundos)			A função suspende a execução por determinado número de segundos.

um exemplo de chamada das funções time() e ctime().

>>> x = time.time()
>>> print(f'Local time: {time.ctime(x)}')
Local time: Tue Jun 30 23:38:55 2020

A variável x recebe o número de segundos desde 00:00:00 de 01/01/1970 pela função time(). Ao executar ctime(x), o número de segundos armazenado em x é convertido em uma string, com o 
horário local.

A classe time.struct_time gera objetos sequenciais com valor de tempo retornado pelas funções gmtime() e localtime(). São objetos com interface de tupla (Tupla é uma sequência finita de 
objetos. Uma tupla é similar à estrutura de dados lista, porém, a principal diferença é que uma tupla, após definida, não permite a adição ou remoção de elementos. )nomeada: os valores 
podem ser acessados pelo índice e pelo nome do atributo.

Índice			Atributo				Valores
0			tm_year					Por exemplo, 2020
1			tm_mon					range [1, 12]
2			tm_mday					range [1, 31]
3			tm_hour					range [0, 23]
4			tm_min					range [0, 59]
5			tm_sec					range [0, 61]
6			tm_wday					range [0, 6], Domingo é 0
7			tm_yday					range [1, 366]
8			tm_isdst				0, 1 ou -1
N/A			tm_zone					abreviação do nome da timezone

USANDO PACOTES EXTERNOS
Além dos módulos fornecidos de forma integrada pela biblioteca padrão do Python, a linguagem possui uma grande vantagem: sua característica open-source permite que qualquer desenvolvedor, 
com o conhecimento adequado, desenvolva sua própria biblioteca e os seus próprios módulos, que chamaremos a partir de agora de pacotes.

Com um pacote pronto, o desenvolvedor pode disponibilizar esse material na internet, de forma que qualquer pessoa possa aproveitar o código implementado. Isso foi um dos fatores que fez com que o Python se tornasse uma das linguagens mais utilizadas no mundo 
atualmente.

Como forma de facilitar a distribuição dos pacotes entre os usuários, existe um grupo dentro da comunidade Python que mantém o chamado Python Package Index, ou PyPI, que é um grande 
servidor no qual os desenvolvedores podem hospedar os seus pacotes, contendo bibliotecas e/ou módulos para que sejam baixados e instalados por outras pessoas.

É possível acessar o PyPI através do pip, um programa que pode ser instalado juntamente com a distribuição do Python. Para isso, certifique-se de que a caixa “pip” está marcada durante a 
instalação.

